# enable typed triggers.
# NB this is needed to modify the libvirt domain scsi controller model to virtio-scsi.
ENV['VAGRANT_EXPERIMENTAL'] = 'typed_triggers'

require 'open3'

Vagrant.configure(2) do |config|
  config.vm.box = 'windows-2022-amd64'
  #config.vm.box = 'windows-2022-uefi-amd64'
  #config.vm.box = 'windows-11-21h2-amd64'
  #config.vm.box = 'windows-11-21h2-uefi-amd64'

  config.vm.hostname = 'example'

  config.vm.provider 'libvirt' do |lv, config|
    lv.default_prefix = "#{File.basename(File.dirname(File.dirname(__FILE__)))}_example_"
    lv.memory = 4*1024
    lv.cpus = 2
    lv.cpu_mode = 'host-passthrough'
    lv.keymap = 'pt'
    lv.nested = true
    lv.disk_bus = 'scsi'
    lv.disk_device = 'sda'
    lv.disk_driver :discard => 'unmap', :cache => 'unsafe'
    config.trigger.before :'VagrantPlugins::ProviderLibvirt::Action::StartDomain', type: :action do |trigger|
      trigger.ruby do |env, machine|
        # modify the scsi controller model to virtio-scsi.
        # see https://github.com/vagrant-libvirt/vagrant-libvirt/pull/692
        # see https://github.com/vagrant-libvirt/vagrant-libvirt/issues/999
        stdout, stderr, status = Open3.capture3(
          'virt-xml', machine.id,
          '--edit', 'type=scsi',
          '--controller', 'model=virtio-scsi')
        if status.exitstatus != 0
          raise "failed to run virt-xml to modify the scsi controller model. status=#{status.exitstatus} stdout=#{stdout} stderr=#{stderr}"
        end
      end
    end
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end

  config.vm.provider 'virtualbox' do |vb, config|
    vb.linked_clone = true
    vb.memory = 4*1024
    vb.cpus = 2
  end

  config.vm.provider 'hyperv' do |hv, config|
    hv.vmname = "#{File.basename(File.dirname(File.dirname(__FILE__)))}-example"
    hv.linked_clone = true
    hv.memory = 4*1024
    hv.cpus = 2
    hv.enable_virtualization_extensions = true # nested virtualization.
    hv.vlan_id = ENV['HYPERV_VLAN_ID']
    # see https://github.com/hashicorp/vagrant/issues/7915
    # see https://github.com/hashicorp/vagrant/blob/10faa599e7c10541f8b7acf2f8a23727d4d44b6e/plugins/providers/hyperv/action/configure.rb#L21-L35
    config.vm.network :private_network, bridge: ENV['HYPERV_SWITCH_NAME'] if ENV['HYPERV_SWITCH_NAME']
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end

  config.vm.provider 'vsphere' do |vsphere, config|
    vsphere.name = ENV['VSPHERE_VM_NAME']
    vsphere.notes = "Created from #{__FILE__}"
    vsphere.cpu_count = 2
    vsphere.memory_mb = 4*1024
    vsphere.user = ENV['GOVC_USERNAME']
    vsphere.password = ENV['GOVC_PASSWORD']
    vsphere.insecure = true
    vsphere.host = ENV['GOVC_HOST']
    vsphere.data_center_name = ENV['GOVC_DATACENTER']
    vsphere.compute_resource_name = ENV['GOVC_CLUSTER']
    vsphere.data_store_name = ENV['GOVC_DATASTORE']
    vsphere.template_name = ENV['VSPHERE_TEMPLATE_NAME']
    vsphere.vm_base_path = ENV['VSPHERE_VM_FOLDER']
    vsphere.vlan = ENV['VSPHERE_VLAN']
    config.vm.synced_folder '.', '/vagrant',
      type: 'smb',
      smb_username: ENV['VAGRANT_SMB_USERNAME'] || ENV['USER'],
      smb_password: ENV['VAGRANT_SMB_PASSWORD']
    # example rsync synced folder.
    # this is used for testing whether rsync is working correctly.
    config.vm.synced_folder '.', '/vagrant-rsync', type: 'rsync', rsync__exclude: [
      '.vagrant/',
      '.git/',
      '*.box']
  end

  #config.vm.provision "windows-sysprep" # NB the windows-sysprep plugin does not work with hyperv.
  config.vm.provision "shell", path: "ps.ps1", args: "provision-chocolatey.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "provision-adk.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "mount-system-partition.ps1"
  config.vm.provision "shell", path: "ps.ps1", args: "summary.ps1"
end
